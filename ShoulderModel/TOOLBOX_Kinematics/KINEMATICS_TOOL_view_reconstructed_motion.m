%{
--------------------------------------------------------------------------
   SCRIPT FOR RUNNING A VIDEO OF THE RECONSTRUCTED MOTION TOGETHER WITH THE
   MEASURED MOTION (IN BLUE AND GREEN)
--------------------------------------------------------------------------

%}

%--------------------------------------------------------------------------
% define where to show the motion
%--------------------------------------------------------------------------
set(KRHandle, 'currentaxes', KRPlotHandles.View_Motion_Axes); hold on;

%--------------------------------------------------------------------------
% I decided to show the smoothened motion
%--------------------------------------------------------------------------
                           
% creat the time
    % take the motion time span
    final_time = str2double(get(KRGUIHandle.TimeFrameEdit, 'string'));

    % define the elapsed time necessary to connect knot i-1 to i
    max_frame = 100*final_time;
    %h = final_time/(length(SSDATA.Measured_Kinematics.IJ)-1);
    h = final_time/(max_frame-1);

    % creat the time
    time = 0: h: final_time;

% define numerical values of the acceleration, velocity, and coordinate for
% the specific GC_id
    % option 1: directly from IK
    q = SSDATA.Joint_Angle_Reconstruction;
    % option 2: smoothened motion
%     for GC_id = 1:11
%          q(GC_id,:) = polyval(SSDATA.Joint_Angle_Coefficients(GC_id, :), time);
%     end

%--------------------------------------------------------------------------
% define the bony landmarks
%--------------------------------------------------------------------------
% run through the motion while skipping some points.

StepSize = 3; % defines the step size that you want to go over the data

%F(1) = getframe(gca); % get the first video frame

ii = 0; % to count the video frames

for i = 1:StepSize:max_frame%length(SSDATA.Measured_Kinematics.IJ)
    
    ii = ii + 1; % to count the video frames
    %--------------------------------------------------------------------------
    % define the wireframe of the reconstructed motion
    %--------------------------------------------------------------------------
    % define the rotation matrices from the generalized coordinates vector (Euler angles)
    Rmat = MAIN_TOOL_geometry_functions('Build Rotation Matrices From Euler Angles', q(:, i), BLDATA);
        Rc = Rmat(:,1:3);
        Rs = Rmat(:,4:6);
        Rh = Rmat(:,7:9);
        Ru = Rmat(:,10:12);
        Rr = Rmat(:,13:15);
        
    % plot the meshing data    
    % Set the correct current bony landmarks
    BLDATA = MAIN_TOOL_geometry_functions('Update Current Bony Landmark Data from Joint Rotation Matrices', Rmat(:,1:3), Rmat(:,4:6), Rmat(:,7:9), Rmat(:,10:12), Rmat(:,13:15), BLDATA);

    
    
    
    
    
%     % Create the 3-D Muscle elements
%     for MuscleId = 1:size(MWDATA,1)
%         
% %         % Origin & Insertion
%        VISUALISATION_view_muscle_origins([], MWDATA, BLDATA, MuscleId);
%        VISUALISATION_view_muscle_insertions([], MWDATA, BLDATA, MuscleId);
%         
%         % Muscle Segements
%         for SegmentId = 1:MWDATA{MuscleId,1}.MSCInfo.NbSegments
%             % Only one segment per muscle to start.
% %             plot3(0, 0, 0,...
% %                     'color', 'red', 'linewidth', 2, 'marker', 'o', 'markerfacecolor', 'red', 'markersize', 6);
%             VISUALISATION_view_muscle_segement([], MWDATA, BLDATA, MuscleId, SegmentId);
%         end
% 
%     end
% 
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
%     % Create the 3-D Meshing Visualisations
% %     if i == 1
% %         KRMOVPlotHandles.WireFrameHandle(1) = VISUALISATION_view_bone_meshing([], MEDATA, 0, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(2) = VISUALISATION_view_bone_meshing([], MEDATA, 1, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(3) = VISUALISATION_view_bone_meshing([], MEDATA, 2, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(4) = VISUALISATION_view_bone_meshing([], MEDATA, 3, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(5) = VISUALISATION_view_bone_meshing([], MEDATA, 4, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(6) = VISUALISATION_view_bone_meshing([], MEDATA, 5, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(7) = VISUALISATION_view_bone_meshing([], MEDATA, 6, BLDATA);
% %     else
% %         KRMOVPlotHandles.WireFrameHandle(1) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(1), MEDATA, 0, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(2) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(2), MEDATA, 1, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(3) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(3), MEDATA, 2, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(4) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(4), MEDATA, 3, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(5) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(5), MEDATA, 4, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(6) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(6), MEDATA, 5, BLDATA);
% %         KRMOVPlotHandles.WireFrameHandle(7) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(7), MEDATA, 6, BLDATA);
% %     end

%     VISUALISATION_view_bone_meshing([], MEDATA, 0, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 1, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 2, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 3, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 4, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 5, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 6, BLDATA);
%     
%     % Set some of the global properties for the entire plot
%     light('Position',[1 0 0],'Style','infinite');
%     light('Position',[0 0 -10],'Style','local');
%     light('Position',[10 -50 0],'Style','infinite');
%     colormap copper;
%     %box on;
%     material dull;
%     %axis equal;
%     axis ([-100 800 -400 800 -700 800])
%     %zoom(1);
%     %view([155, 15]);

    % Get Initial Rotation Matrices
    Rc_initial = BLDATA.Initial_Matrices_L2A.Rc;
    Rs_initial = BLDATA.Initial_Matrices_L2A.Rs;
    Rh_initial = BLDATA.Initial_Matrices_L2A.Rh;
    Ru_initial = BLDATA.Initial_Matrices_L2A.Ru;
    Rr_initial = BLDATA.Initial_Matrices_L2A.Rr;
    
    % Get all initial configurations of the landmarks
    IJ_initial = BLDATA.Initial_Points.IJ;
    PX_initial = BLDATA.Initial_Points.PX;
    T8_initial = BLDATA.Initial_Points.T8;
    C7_initial = BLDATA.Initial_Points.C7;
    SC_initial = BLDATA.Initial_Points.SC;
    AC_initial = BLDATA.Initial_Points.AC;
    AA_initial = BLDATA.Initial_Points.AA;
    TS_initial = BLDATA.Initial_Points.TS;
    AI_initial = BLDATA.Initial_Points.AI;
    GH_initial = BLDATA.Initial_Points.GH;
    HU_initial = BLDATA.Initial_Points.HU;
    EL_initial = BLDATA.Initial_Points.EL;
    EM_initial = BLDATA.Initial_Points.EM;
    CP_initial = BLDATA.Initial_Points.CP;
    US_initial = BLDATA.Initial_Points.US;
    RS_initial = BLDATA.Initial_Points.RS;
    
    % define the configurations of the landmarks
    IJ = IJ_initial;
    PX = PX_initial;
    T8 = T8_initial;
    C7 = C7_initial;
    SC = SC_initial;
    AC = Rc*Rc_initial'*(AC_initial - SC_initial) + SC_initial;
    AA = Rs*Rs_initial'*(AA_initial - AC_initial) + AC;
    TS = Rs*Rs_initial'*(TS_initial - AC_initial) + AC;
    AI = Rs*Rs_initial'*(AI_initial - AC_initial) + AC;
    GH = Rs*Rs_initial'*(GH_initial - AC_initial) + AC;
    HU = Rh*Rh_initial'*(HU_initial - GH_initial) + GH;
    EL = Rh*Rh_initial'*(EL_initial - GH_initial) + GH;
    EM = Rh*Rh_initial'*(EM_initial - GH_initial) + GH;
    US = Ru*Ru_initial'*(US_initial - HU_initial) + HU;
    CP = Rh*Rh_initial'*(CP_initial - GH_initial) + GH;
    RS = Rr*Rr_initial'*(RS_initial - CP_initial) + CP;
    
    % Build the bone wire frames for plotting purposes
    Reconstructed_WF_Thorax       = [IJ, PX, T8, C7, IJ];
    Reconstructed_WF_Clavicula    = [SC, AC];
    Reconstructed_WF_Scapula      = [AC, AA, TS, AI, GH, AC];
    Reconstructed_WF_Humerus     = [GH, HU, EL, EM];
    Reconstructed_WF_Ulna         = [CP, HU, EM, US];
    Reconstructed_WF_Radius       = [CP, RS];
%     
    %--------------------------------------------------------------------------
    % define the wireframe of the measured motion
    %--------------------------------------------------------------------------
    Measured_WF_Thorax      = [SSDATA.Measured_Kinematics.IJ(:,i),...
                               SSDATA.Measured_Kinematics.PX(:,i),...
                               SSDATA.Measured_Kinematics.T8(:,i),...
                               SSDATA.Measured_Kinematics.C7(:,i),...
                               SSDATA.Measured_Kinematics.IJ(:,i)];
                           
    Measured_WF_Clavicula   = [SSDATA.Measured_Kinematics.SC(:,i),...
                               SSDATA.Measured_Kinematics.AC(:,i)];
                           
    Measured_WF_Scapula     = [SSDATA.Measured_Kinematics.AC(:,i),...
                               SSDATA.Measured_Kinematics.AA(:,i),...
                               SSDATA.Measured_Kinematics.TS(:,i),...
                               SSDATA.Measured_Kinematics.AI(:,i),...
                               SSDATA.Measured_Kinematics.GH(:,i),...
                               SSDATA.Measured_Kinematics.AC(:,i)];
                           
    Measured_WF_Humerus     = [SSDATA.Measured_Kinematics.GH(:,i),...
                               SSDATA.Measured_Kinematics.HU(:,i),...
                               SSDATA.Measured_Kinematics.EL(:,i),...
                               SSDATA.Measured_Kinematics.EM(:,i)];
                           
    Measured_WF_Ulna        = [SSDATA.Measured_Kinematics.CP(:,i),...
                               SSDATA.Measured_Kinematics.HU(:,i),...
                               SSDATA.Measured_Kinematics.EM(:,i),...
                               SSDATA.Measured_Kinematics.US(:,i)];
                           
    Measured_WF_Radius      = [SSDATA.Measured_Kinematics.CP(:,i),...
                               SSDATA.Measured_Kinematics.RS(:,i)];
                           
    %--------------------------------------------------------------------------
    % plot the two wireframes together
    %--------------------------------------------------------------------------
    % plot reconstructed wireframes    
    plot3(Reconstructed_WF_Thorax(1,:),...
          Reconstructed_WF_Thorax(2,:),...
          Reconstructed_WF_Thorax(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', 'o',...
          'markerfacecolor', 'blue',...
          'markeredgecolor', 'blue');
    plot3(Reconstructed_WF_Clavicula(1,:),...
          Reconstructed_WF_Clavicula(2,:),...
          Reconstructed_WF_Clavicula(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', 'o',...
          'markerfacecolor', 'blue',...
          'markeredgecolor', 'blue');   
    plot3(Reconstructed_WF_Scapula(1,:),...
          Reconstructed_WF_Scapula(2,:),...
          Reconstructed_WF_Scapula(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', 'o',...
          'markerfacecolor', 'blue',...
          'markeredgecolor', 'blue');
    plot3(Reconstructed_WF_Humerus(1,:),...
          Reconstructed_WF_Humerus(2,:),...
          Reconstructed_WF_Humerus(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', 'o',...
          'markerfacecolor', 'blue',...
          'markeredgecolor', 'blue');
    plot3(Reconstructed_WF_Ulna(1,:),...
          Reconstructed_WF_Ulna(2,:),...
          Reconstructed_WF_Ulna(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', 'o',...
          'markerfacecolor', 'blue',...
          'markeredgecolor', 'blue');
    plot3(Reconstructed_WF_Radius(1,:),...
          Reconstructed_WF_Radius(2,:),...
          Reconstructed_WF_Radius(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', 'o',...
          'markerfacecolor', 'blue',...
          'markeredgecolor', 'blue');  
%       
% plot measured wireframes

%     plot3(Measured_WF_Thorax(1,:),...
%           Measured_WF_Thorax(2,:),...
%           Measured_WF_Thorax(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', '*',...
%           'markerfacecolor', 'green',...
%           'markeredgecolor', 'green');
%     plot3(Measured_WF_Clavicula(1,:),...
%           Measured_WF_Clavicula(2,:),...
%           Measured_WF_Clavicula(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', '*',...
%           'markerfacecolor', 'green',...
%           'markeredgecolor', 'green');
%     plot3(Measured_WF_Scapula(1,:),...
%           Measured_WF_Scapula(2,:),...
%           Measured_WF_Scapula(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', '*',...
%           'markerfacecolor', 'green',...
%           'markeredgecolor', 'green');
%     plot3(Measured_WF_Humerus(1,:),...
%           Measured_WF_Humerus(2,:),...
%           Measured_WF_Humerus(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', '*',...
%           'markerfacecolor', 'green',...
%           'markeredgecolor', 'green');      
%     plot3(Measured_WF_Ulna(1,:),...
%           Measured_WF_Ulna(2,:),...
%           Measured_WF_Ulna(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', '*',...
%           'markerfacecolor', 'green',...
%           'markeredgecolor', 'green');      
%     plot3(Measured_WF_Radius(1,:),...
%           Measured_WF_Radius(2,:),...
%           Measured_WF_Radius(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', '*',...
%           'markerfacecolor', 'green',...
%           'markeredgecolor', 'green');

      
    % show extra information about the contact  

    str1 = ['time = ', num2str(time(i)), ' [s]']; % show the abduction angle on the plot
    str1_prop = annotation('textbox',[0.01 0.48 0.15 0.02],'String',str1,'FitBoxToText','off','BackgroundColor','w');
    str1_prop.FontSize = 16;
    
    %drawnow;
    pause(h);
    
    F(ii) = getframe(gca); % save the frame

    if i < 1 + floor((max_frame-1)/StepSize)*StepSize % length(SSDATA.Measured_Kinematics.IJ)
    cla
    end
end
%}

%{
% TO CHECK MY METHOD

StepSize = 10; % defines the step size that you want to go over the data

%F(1) = getframe(gca); % get the first video frame

ii = 0; % to count the video frames

for i = 1:StepSize:max_frame%length(SSDATA.Measured_Kinematics.IJ)
    
    ii = ii + 1; % to count the video frames
    %--------------------------------------------------------------------------
    % define the wireframe of the reconstructed motion
    %--------------------------------------------------------------------------
    % define the rotation matrices from the generalized coordinates vector (Euler angles)
%     Rmat = MAIN_TOOL_geometry_functions('Build Rotation Matrices From Euler Angles', q(:, i), BLDATA);
%         Rc = Rmat(:,1:3);
%         Rs = Rmat(:,4:6);
%         Rh = Rmat(:,7:9);
%         Ru = Rmat(:,10:12);
%         Rr = Rmat(:,13:15);
%         
%     % plot the meshing data    
%     % Set the correct current bony landmarks
%     BLDATA = MAIN_TOOL_geometry_functions('Update Current Bony Landmark Data from Joint Rotation Matrices', Rmat(:,1:3), Rmat(:,4:6), Rmat(:,7:9), Rmat(:,10:12), Rmat(:,13:15), BLDATA);

    % Create the 3-D Meshing Visualisations
%     if i == 1
%         KRMOVPlotHandles.WireFrameHandle(1) = VISUALISATION_view_bone_meshing([], MEDATA, 0, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(2) = VISUALISATION_view_bone_meshing([], MEDATA, 1, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(3) = VISUALISATION_view_bone_meshing([], MEDATA, 2, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(4) = VISUALISATION_view_bone_meshing([], MEDATA, 3, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(5) = VISUALISATION_view_bone_meshing([], MEDATA, 4, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(6) = VISUALISATION_view_bone_meshing([], MEDATA, 5, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(7) = VISUALISATION_view_bone_meshing([], MEDATA, 6, BLDATA);
%     else
%         KRMOVPlotHandles.WireFrameHandle(1) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(1), MEDATA, 0, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(2) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(2), MEDATA, 1, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(3) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(3), MEDATA, 2, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(4) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(4), MEDATA, 3, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(5) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(5), MEDATA, 4, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(6) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(6), MEDATA, 5, BLDATA);
%         KRMOVPlotHandles.WireFrameHandle(7) = VISUALISATION_view_bone_meshing(KRMOVPlotHandles.WireFrameHandle(7), MEDATA, 6, BLDATA);
%     end

%     VISUALISATION_view_bone_meshing([], MEDATA, 0, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 1, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 2, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 3, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 4, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 5, BLDATA);
%     VISUALISATION_view_bone_meshing([], MEDATA, 6, BLDATA);
%     
%     % Set some of the global properties for the entire plot
%     light('Position',[1 0 0],'Style','infinite');
%     light('Position',[0 0 -10],'Style','local');
%     light('Position',[10 -50 0],'Style','infinite');
%     colormap copper;
%     %box on;
%     material dull;
%     %axis equal;
%     axis ([-100 800 -400 800 -700 800])
%     %zoom(1);
%     %view([155, 15]);

%     % Get Initial Rotation Matrices
%     Rc_initial = BLDATA.Initial_Matrices_L2A.Rc;
%     Rs_initial = BLDATA.Initial_Matrices_L2A.Rs;
%     Rh_initial = BLDATA.Initial_Matrices_L2A.Rh;
%     Ru_initial = BLDATA.Initial_Matrices_L2A.Ru;
%     Rr_initial = BLDATA.Initial_Matrices_L2A.Rr;
%     
%     % Get all initial configurations of the landmarks
%     IJ_initial = BLDATA.Initial_Points.IJ;
%     PX_initial = BLDATA.Initial_Points.PX;
%     T8_initial = BLDATA.Initial_Points.T8;
%     C7_initial = BLDATA.Initial_Points.C7;
%     SC_initial = BLDATA.Initial_Points.SC;
%     AC_initial = BLDATA.Initial_Points.AC;
%     AA_initial = BLDATA.Initial_Points.AA;
%     TS_initial = BLDATA.Initial_Points.TS;
%     AI_initial = BLDATA.Initial_Points.AI;
%     GH_initial = BLDATA.Initial_Points.GH;
%     HU_initial = BLDATA.Initial_Points.HU;
%     EL_initial = BLDATA.Initial_Points.EL;
%     EM_initial = BLDATA.Initial_Points.EM;
%     CP_initial = BLDATA.Initial_Points.CP;
%     US_initial = BLDATA.Initial_Points.US;
%     RS_initial = BLDATA.Initial_Points.RS;
%     
%     % define the configurations of the landmarks
%     IJ = IJ_initial;
%     PX = PX_initial;
%     T8 = T8_initial;
%     C7 = C7_initial;
%     SC = SC_initial;
%     AC = Rc*Rc_initial'*(AC_initial - SC_initial) + SC_initial;
%     AA = Rs*Rs_initial'*(AA_initial - AC_initial) + AC;
%     TS = Rs*Rs_initial'*(TS_initial - AC_initial) + AC;
%     AI = Rs*Rs_initial'*(AI_initial - AC_initial) + AC;
%     GH = Rs*Rs_initial'*(GH_initial - AC_initial) + AC;
%     HU = Rh*Rh_initial'*(HU_initial - GH_initial) + GH;
%     EL = Rh*Rh_initial'*(EL_initial - GH_initial) + GH;
%     EM = Rh*Rh_initial'*(EM_initial - GH_initial) + GH;
%     US = Ru*Ru_initial'*(US_initial - HU_initial) + HU;
%     CP = Rh*Rh_initial'*(CP_initial - GH_initial) + GH;
%     RS = Rr*Rr_initial'*(RS_initial - CP_initial) + CP;
%     
%     % Build the bone wire frames for plotting purposes
%     Reconstructed_WF_Thorax       = [IJ, PX, T8, C7, IJ];
%     Reconstructed_WF_Clavicula    = [SC, AC];
%     Reconstructed_WF_Scapula      = [AC, AA, TS, AI, GH, AC];
%     Reconstructed_WF_Humerus     = [GH, HU, EL, EM];
%     Reconstructed_WF_Ulna         = [CP, HU, EM, US];
%     Reconstructed_WF_Radius       = [CP, RS];
% %     
    %--------------------------------------------------------------------------
    % define the wireframe of the measured motion
    %--------------------------------------------------------------------------
    Measured_WF_Thorax      = [SSDATA.Measured_Kinematics.IJ(:,i),...
                               SSDATA.Measured_Kinematics.PX(:,i),...
                               SSDATA.Measured_Kinematics.T8(:,i),...
                               SSDATA.Measured_Kinematics.C7(:,i),...
                               SSDATA.Measured_Kinematics.IJ(:,i)];
                           
    Measured_WF_Clavicula   = [SSDATA.Measured_Kinematics.SC(:,i),...
                               SSDATA.Measured_Kinematics.AC(:,i)];
                           
    Measured_WF_Scapula     = [SSDATA.Measured_Kinematics.AC(:,i),...
                               SSDATA.Measured_Kinematics.AA(:,i),...
                               SSDATA.Measured_Kinematics.TS(:,i),...
                               SSDATA.Measured_Kinematics.AI(:,i),...
                               SSDATA.Measured_Kinematics.GH(:,i),...
                               SSDATA.Measured_Kinematics.AC(:,i)];
                           
    Measured_WF_Humerus     = [SSDATA.Measured_Kinematics.GH(:,i),...
                               SSDATA.Measured_Kinematics.HU(:,i),...
                               SSDATA.Measured_Kinematics.EL(:,i),...
                               SSDATA.Measured_Kinematics.EM(:,i)];
                           
    Measured_WF_Ulna        = [SSDATA.Measured_Kinematics.CP(:,i),...
                               SSDATA.Measured_Kinematics.HU(:,i),...
                               SSDATA.Measured_Kinematics.EM(:,i),...
                               SSDATA.Measured_Kinematics.US(:,i)];
                           
    Measured_WF_Radius      = [SSDATA.Measured_Kinematics.CP(:,i),...
                               SSDATA.Measured_Kinematics.RS(:,i)];
                           
    %--------------------------------------------------------------------------
    % plot the two wireframes together
    %--------------------------------------------------------------------------
    % plot reconstructed wireframes    
%     plot3(Reconstructed_WF_Thorax(1,:),...
%           Reconstructed_WF_Thorax(2,:),...
%           Reconstructed_WF_Thorax(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', 'o',...
%           'markerfacecolor', 'blue',...
%           'markeredgecolor', 'blue');
%     plot3(Reconstructed_WF_Clavicula(1,:),...
%           Reconstructed_WF_Clavicula(2,:),...
%           Reconstructed_WF_Clavicula(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', 'o',...
%           'markerfacecolor', 'blue',...
%           'markeredgecolor', 'blue');   
%     plot3(Reconstructed_WF_Scapula(1,:),...
%           Reconstructed_WF_Scapula(2,:),...
%           Reconstructed_WF_Scapula(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', 'o',...
%           'markerfacecolor', 'blue',...
%           'markeredgecolor', 'blue');
%     plot3(Reconstructed_WF_Humerus(1,:),...
%           Reconstructed_WF_Humerus(2,:),...
%           Reconstructed_WF_Humerus(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', 'o',...
%           'markerfacecolor', 'blue',...
%           'markeredgecolor', 'blue');
%     plot3(Reconstructed_WF_Ulna(1,:),...
%           Reconstructed_WF_Ulna(2,:),...
%           Reconstructed_WF_Ulna(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', 'o',...
%           'markerfacecolor', 'blue',...
%           'markeredgecolor', 'blue');
%     plot3(Reconstructed_WF_Radius(1,:),...
%           Reconstructed_WF_Radius(2,:),...
%           Reconstructed_WF_Radius(3,:),...
%           'color', 'black',...
%           'linewidth', 2,...
%           'marker', 'o',...
%           'markerfacecolor', 'blue',...
%           'markeredgecolor', 'blue');  
%       
% plot measured wireframes

    plot3(Measured_WF_Thorax(1,:),...
          Measured_WF_Thorax(2,:),...
          Measured_WF_Thorax(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', '*',...
          'markerfacecolor', 'green',...
          'markeredgecolor', 'green');
    plot3(Measured_WF_Clavicula(1,:),...
          Measured_WF_Clavicula(2,:),...
          Measured_WF_Clavicula(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', '*',...
          'markerfacecolor', 'green',...
          'markeredgecolor', 'green');
    plot3(Measured_WF_Scapula(1,:),...
          Measured_WF_Scapula(2,:),...
          Measured_WF_Scapula(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', '*',...
          'markerfacecolor', 'green',...
          'markeredgecolor', 'green');
    plot3(Measured_WF_Humerus(1,:),...
          Measured_WF_Humerus(2,:),...
          Measured_WF_Humerus(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', '*',...
          'markerfacecolor', 'green',...
          'markeredgecolor', 'green');      
    plot3(Measured_WF_Ulna(1,:),...
          Measured_WF_Ulna(2,:),...
          Measured_WF_Ulna(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', '*',...
          'markerfacecolor', 'green',...
          'markeredgecolor', 'green');      
    plot3(Measured_WF_Radius(1,:),...
          Measured_WF_Radius(2,:),...
          Measured_WF_Radius(3,:),...
          'color', 'black',...
          'linewidth', 2,...
          'marker', '*',...
          'markerfacecolor', 'green',...
          'markeredgecolor', 'green');

      
    % show extra information about the contact  

    str1 = ['time = ', num2str(time(i)), ' [s]']; % show the abduction angle on the plot
    str1_prop = annotation('textbox',[0.01 0.48 0.15 0.02],'String',str1,'FitBoxToText','off','BackgroundColor','w');
    str1_prop.FontSize = 16;
    
    %drawnow;
    pause(h);
    
    F(ii) = getframe(gca); % save the frame

    if i < 1 + floor((max_frame-1)/StepSize)*StepSize % length(SSDATA.Measured_Kinematics.IJ)
    cla
    end
end
%}
myvideo = VideoWriter('recontructed_motion','Uncompressed AVI'); % create an avi file to save the F
myVideo.Quality = 100;
%myVideo.FrameRate = 50;
open(myvideo);
writeVideo(myvideo,F);          % write the resulted F into the created video 
close(myvideo);

% % Clear some variables
% clear SC AC AA TS AI GH HU EL EM US RS CP Rmat Rc Rs Rh Ru Rr;
% 
% % When Motion is over, reset the current BLDATA to initial
% % Get the Current Rotation Matrices
% Rmat = MAIN_TOOL_geometry_functions('Build Rotation Matrices From Euler Angles', KEDATA.Joint_Angle_Evolution(:,1), BLDATA);
% 
% % Update the current configuration
% BLDATA = MAIN_TOOL_geometry_functions(...
%     'Update Current Bony Landmark Data from Joint Rotation Matrices', Rmat(:,1:3), Rmat(:,4:6), Rmat(:,7:9), Rmat(:,10:12), Rmat(:,13:15), BLDATA);
% 
% clear Rmat i;